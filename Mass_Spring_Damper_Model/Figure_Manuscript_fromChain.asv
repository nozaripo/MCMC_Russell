% Lets make some plots for a paper! Based on Results from an MCMC run of
% the spring-mass-damper system

clear
clc
close all

% load in results and chains from MCMC run
load chain_20210505T102404 % 25k iterations
load results_20210505T102404

rng(99)

% chain is the variable that is saved
titles = ["m", "c", "k1", "k2", "R", "x0", "xdot0"];
n_pools = size(chain,3);
choose_result = 2;  % select a chain to plot some of the data from 
n_iter = size(chain,1); 
burn_in = n_iter*0.5; % specify the burn in 

result_1 = results(:,:,1);
result_2 = results(:,:,2);
result_3 = results(:,:,3);
result_4 = results(:,:,4);
result_5 = results(:,:,5);

% read in prior from each chain
prior_center(1,:) = result_1.prior(:,1);
prior_width(1,:)  = result_1.prior(:,2); 

prior_center(2,:) = result_2.prior(:,1);
prior_width(2,:)  = result_2.prior(:,2); 

prior_center(3,:) = result_3.prior(:,1);
prior_width(3,:)  = result_3.prior(:,2); 

prior_center(4,:) = result_4.prior(:,1);
prior_width(4,:)  = result_4.prior(:,2); 

prior_center(5,:) = result_5.prior(:,1);
prior_width(5,:)  = result_5.prior(:,2); 

limits = result_1.limits;
non_burnin = n_iter - burn_in; 

% merge the chains to do analyses 
chain_full = zeros(non_burnin*n_pools,size(chain,2)); 

for i = 1:n_pools 
    chain_full(1+(non_burnin*(i-1)):non_burnin*i,:) = chain(burn_in+1:end,:,i); 
    
end
    
% first plot the chains to visualize the results

% plot thes chains
set(gcf,'units','centimeters','Position',[7.5935 4.2863 20 12])
figure(1);
for i =1:size(chain,2)
    subplot(2,4,i)
    plot(chain(:,i,1),'k')
    hold on 
    plot(chain(:,i,2),'b')
    hold on 
    plot(chain(:,i,3),'r')
    hold on 
    plot(chain(:,i,4),'g')
    hold on 
    plot(chain(:,i,5),'c')
    title(titles{i})
    xlabel('iteration')
    ylabel('value')
end

figure(); clf

set(gcf,'units','centimeters','Position',[7.5935 4.2863 20 14])
mcmcplot(chain(burn_in+1:end,:,choose_result),[],result_1,'pairs');


options.nsimu = size(chain,1); 

nsimu = size(chain,1) - burn_in;
% Plot the rank without the first N iterations (burn in) 
% rank_plot_SMD(chain(burn_in:end,:,:),options,n_pools);
% varagin = 2
% figure(); clf
% mcmcplot(chain(burn_in:end,:,1),[],results,'denspanel2',2);
% m_real  = 1;
% c_real  = 0.25;
% k1_real = 3; % stiffness value for region 1
% k2_real = 10; % stiffness value for region 2
% R_real  = 0.5; % threshold to switch from region 1 to region 2
% x0_real = 2;
% xdot0_real = 0;

% m_var     = 0.40; 
% c_var     = 0.10;
% k1_var    = 0.40; 
% k2_var    = 1.00; 
% R_var     = 0.16; 
% x0_var    = 0.40; 
% xdot0_var = 0.40; 

% m_var     = 1; 
% c_var     = 0.5;
% k1_var    = 2.5; 
% k2_var    = 2.5; 
% R_var     = 0.5; 
% x0_var    = 1; 
% xdot0_var = 2; 

% for i = 1:n_pools
%     params(:,i) = { 
%         {'m',    m(i),       0, 50, m_real,     m_var}
%         {'c',    c(i),       0, 10, c_real,     c_var}
%         {'k1',   k1(i),      0, 50, k1_real,    k1_var}
%         {'k2',   k2(i),      0, 50, k2_real,    k2_var}
%         {'R',    R(i),       0,  2, R_real,     R_var}
%         {'x0',   x0(i)    -10,  10, x0_real,    x0_var}
%         {'xdot0',xdot0(i),-100, 100, xdot0_real,xdot0_var}
%         };    
% end

real = [1, 0.20, 3, 10, 0.03, 0.1, 0];
% % variance = [0.4, 0.1, 0.4, 1.0,0.16,0.4,0.4];
% variance = [1, 0.5, 2.5, 2.5, 0.5, 1, 2];
% 
% results.limits(:,1) = [0, 0, 0, 0, 0, -10, -100];
% results.limits(:,2) = [50, 10, 50, 50, 2, 10, 100];

% final = chain(end,1,1)
% --------- Here's the figure ------------------- % 
% going to pick the first chain, and plot the results from that, while
% showing that the other 5 chains converged to the same point

figure(99)

% These values would define the space between the graphs
% if equal to 1 there will be no space between graphs
% n1 = 5;
% n2 = 8; 
% nw = 0.2; % normalized width
% nh = 0.2; % normalized height

set(gcf,'units','centimeters','Position',[7.5935 4.2863 20 14])

ylimmin2 = [0, 0,  0,  0, 0, 0, -1];
ylimmax2 = [2, 1, 10, 20, .1, .2,  1];
% second row is the chain series from a single chain
for i = 1:7
    hAx(i) = subplot(5,8,8+i);
    for j = 1:n_pools
        h1 = plot(chain(:,i,1),'color','k','LineWidth',0.1);
        hold on 
        h2 = plot(chain(:,i,2),'color','b','LineWidth',0.1);
        hold on 
        h3 = plot(chain(:,i,3),'color','r','LineWidth',0.1);
        hold on 
        h4 = plot(chain(:,i,4),'color','g','LineWidth',0.1);
        hold on 
        h5 = plot(chain(:,i,5),'color','c','LineWidth',0.1);
        hold on 
    end
    h6 = xline(burn_in,'LineStyle','--','color',[ 0.4660    0.6740    0.1880],'LineWidth',1.5);
%     plot(chain(burn_in:end,i,1),'color',[0.2422    0.1504    0.6603],'LineWidth',0.1)
%     title(titles{i})
    set(hAx(i),'xtick',[])
    set(hAx(i),'xticklabel',[])
%     pos = get(gca, 'Position');
% %     pos(1) = 0.055;
%     pos(3) = 0.09;
%     set(hAx(i), 'Position', pos)
%     xticks([0 burn_in n_iter]);
%     xlabel('iteration')
    yMaxValue = max(chain(:,i,choose_result))*1.2; % give the density some space to breathe
%     yMin = min(chain(burn_in:end,i,result)); % give the density some space to breathe
%     if yMin > 0
%         yMinValue = yMin * 0.8;
%     else
%         yMinValue = yMin * 1.2;
%     end
       ylim([ ylimmin2(i) ylimmax2(i)]); 
       
%     ylim([yMinValue yMaxValue])
    if i == 1
        ylabel('value')
        text(-0.9,1,'B','fontsize',10,'fontweight','bold','units','normalized')
    end
%     if i == 7
%         legend('Chain','Burn-in','Orientation','vertical')
%         legend('boxoff')
%     end
    if i == 5
        yticks([0 0.1])
    end
    if i == 7
        lgd = legend([h1, h2, h3, h4, h5, h6],'Chain 1','Chain 2','Chain 3','Chain 4','Chain 5','burn-in','orientation','vertical','position',[0.82 0.6 0.1124 0.1597]); %width = 0.1597
        legend('boxoff')
        lgd.FontSize = 8;
    end
    set(hAx(i),'fontsize',9)
    box off
%     drawnow 
end

% ylimmin3 = [0, 0,  0,  0, 0, 0, 0];
% ylimmax3 = [1, 1, 15, 30, 2, 4,  3];
xlimmin3 = [0, 0,  0,  0, 0, -.10, -1];
xlimmax3 = [3, 1, 8, 20, 0.1, 0.4,  1];
% Third row is for the posterior denisty values --
for i = 1:7
    subplot(5,8,16+i)
%     [y(:,i),x(:,i)]=density(chain(burn_in:end,i,choose_result),[]);
    [y(:,i),x(:,i)]=density(chain_full(:,i),[]);
    plot(x(:,i),y(:,i),'-k','LineWidth',2)
%     set(h,'ytick',[]);
%     title(sprintf('%s',titles{i}))
    set(gca,'fontsize',9)
%     set(gca,'ytick',[])
%     set(gca,'yticklabel',[])
    % add in the real value with a down arrow
%     text(real(i),1,'\downarrow', 'color' ,'r','FontWeight','bold', 'Fontsize', 14);
    xline(real(i),'r--','LineWidth',1.5);
    yMaxValue = max(y(:,i))*1.2; % give the density some space to breathe
    ylim([0 ceil(yMaxValue)])
%     yticks([0 (ceil(yMaxValue)/2) ceil(yMaxValue)]);
    set(gca,'ytick',[])
    set(gca,'yticklabel',[])
%     ylim([ylimmin3(i) ylimmax3(i)]);
    xlim([xlimmin3(i) xlimmax3(i)]);
%     xlim(:,i) =get(gca,'xlim');
    if i == 1
        ylabel('density')
        text(-0.9,1,'C','fontsize',10,'fontweight','bold','units','normalized')
    end
    if i == 7
        lgd= legend('Post. Density','Real Value','Orientation','vertical','position',[0.82 0.55 0.1124 0.07]);
        legend('boxoff')
        lgd.FontSize= 8;
    end
    box off
end 

% find the max values in the densities above - in other words - find the
% peak probability 
for i = 1:7
    y_max = max(y(:,i));
    B(:,i) = y_max == y(:,i);
    index(i) = find([B(:,i)] == 1);
    posterior_center(i) = x(index(i),i); 
end

% Need to find the standard deviation - which i think this is the best way
% to do that... It's kind of wonky - but the idea is to integrate the AUC
% of the posterior density, until we get to 34.1%. This sort of assumes
% that it's a normal distribution, which doesn't hold up exactly. Might ask
% Dan or even James about this. 

integrate = zeros(100,7);
integrate_sum = zeros(100,7);

% for i = 1:7 
%     for j = index(i):100
%         integrate(j-index(i)+1,i) = (x(j,i)-x(j-1,i)) * y(j,i);
%     end
%     integrate_sum(1,i) = integrate(1,i);
%     for k = 2:100
%         integrate_sum(k,i) = integrate_sum(k-1,i)+integrate(k,i);
%     end
%     C(:,i) = integrate_sum(:,i)<0.341;
%     width(i) = index(i) + sum(C(:,i));
%     posterior_std(i) = x(width(i),i)-posterior_center(i);
% end  




% for i = 1:7
%     integrate_sum(: = 
% end
% first row is the prior 
% prior(1,:) = prior_center;
% prior(2,:) = prior_width; 
xlimit_get = [xlimmin3; xlimmax3];
init_param = chain(1,:,choose_result);
% xlim(:,1) = prior(1,:) - variance;
% xlim(:,2) = prior(1,:) + variance;

for i = 1:7
    subplot(5,8,i)
%     ii  = inds(i);
%     mus = prior(:,i);
        mu  = prior_center(1,i);
        sig = prior_width(1,i);
        mi  = limits(i,1);
        ma  = limits(i,2);

        xlimit=xlimit_get(:,i);
        % xp = linspace(max(mi,mu-3*sig),min([ma,mu+3*sig,x(end)+xdr]));
        xp = linspace(max(mi,mu-3*sig),min([ma,mu+3*sig]));
        yp = norpf(xp,mu,sig^2);
        yn = nordf((mi-mu)/sig)+1-nordf((ma-mu)/sig); % area outside bounds
        plot([xp(1),xp],[0,yp./(1-yn)],'--k','LineWidth',1.5)
%     for j = 1:n_pools
%         mu  = prior_center(j,i);
%         sig = prior_width(j,i);
%         mi  = limits(i,1);
%         ma  = limits(i,2);
% 
%         xlimit=xlimit_get(:,i);
%         % xp = linspace(max(mi,mu-3*sig),min([ma,mu+3*sig,x(end)+xdr]));
%         xp = linspace(max(mi,mu-3*sig),min([ma,mu+3*sig]));
%         yp = norpf(xp,mu,sig^2);
%         yn = nordf((mi-mu)/sig)+1-nordf((ma-mu)/sig); % area outside bounds
%         if j == 1
%             plot([xp(1),xp],[0,yp./(1-yn)],'--k','LineWidth',1.5)
%         elseif j == 2
%             plot([xp(1),xp],[0,yp./(1-yn)],'--b','LineWidth',1.5)
%         elseif j == 3
%             plot([xp(1),xp],[0,yp./(1-yn)],'--r','LineWidth',1.5)
%         elseif j == 4
%             plot([xp(1),xp],[0,yp./(1-yn)],'--g','LineWidth',1.5)
%         elseif j == 5
%             plot([xp(1),xp],[0,yp./(1-yn)],'--c','LineWidth',1.5)
%         end
%     %   plot([xp(1),xp],[0,yp./(1-yn)],'--k')
%         hold on 
%     end
    xline(init_param(i),'color',[0.2422    0.1504    0.6603],'LineWidth',1.5);
    hold on 
    xline(real(i),'r--','LineWidth',1.5);
    ymaxval = max(yp./(1-yn))*1.2;
    ylim([0 ceil(ymaxval)]);
%     yticks([0 ceil(ymaxval)]);
    set(gca,'ytick',[])
    set(gca,'yticklabel',[])
    set(gca,'fontsize',9)
    hold off
    xlim([xlimmin3(i) xlimmax3(i)]);
    title(titles{i})
    if i == 1
        ylabel('density')
        text(-0.9,1,'A','fontsize',10,'fontweight','bold','units','normalized')
    end
    if i == 4
        xticks([0 20])
    end
    if i == 7 
        lgd= legend('Prior Density','Init. Param.','Real Value','Orientation','vertical','position',[0.82 0.85 0.1124 0.10]);
        legend('boxoff')
        lgd.FontSize= 8;
    end
    box off
end



% Forth row is to show convergence across 5 chains. 
for i = 1:7
    %calculate the rank for each parameter 
    rank = rank_plot_SMD_param(chain(burn_in+1:end,i,:),n_pools);
      
    subplot(5,8,24+i)
    set(gca,'fontsize',16)
    histogram(rank(1:nsimu,3),'NumBins',10,'BinLimits',[0 1],'FaceColor','k','FaceAlpha',0.5)
    hold on 
    histogram(rank(nsimu+1:2*nsimu,3),'NumBins',10,'BinLimits',[0 1],'FaceColor','b','FaceAlpha',0.5)
    hold on 
    histogram(rank(2*nsimu+1:3*nsimu,3),'NumBins',10,'BinLimits',[0 1],'FaceColor','r','FaceAlpha',0.5)
    hold on 
    histogram(rank(3*nsimu+1:4*nsimu,3),'NumBins',10,'BinLimits',[0 1],'FaceColor','g','FaceAlpha',0.5)
    hold on 
    histogram(rank(4*nsimu+1:5*nsimu,3),'NumBins',10,'BinLimits',[0 1],'FaceColor','c','FaceAlpha',0.5)
    set(gca,'fontsize',9)
%     ylim([0 1000])
%     yticks([0 500 1000])
%     if i >=2
        set(gca,'ytick',[])
        set(gca,'yticklabel',[])
%     end
    box off
    
    if i == 1
        text(-0.9,1,'D','fontsize',10,'fontweight','bold','units','normalized')
    end
    if i == 7
        lgd = legend('Run 1','Run 2','Run 3','Run 4','Run 5','orientation','vertical','position',[0.82 0.25 0.1124 0.1597]);
        legend('boxoff')
        lgd.FontSize= 8;
    end
end

% do 10 random draws from each chain, then plot the results to see how
% the results fit the data
time = 0:0.05:20; % time column, !! make more flexible based on input data
% Load Data from results
load('position_newmag20.mat')
load('velocity_newmag20.mat')
load('position_noise_newmag20.mat')
for k = 1:size(position_noise,2)
    velocity_noise(:,k) = deriv(position_noise(:,k),0.05);
end

for k = 1:20
   draw(k) = randi([burn_in+1 options.nsimu]);
   Draw_Results(k,:) = chain(draw(k),:,choose_result);
%        y0 = [2,0];
%      y0 = [Draw_Results(k,4),0];
   y0(k,:) = [Draw_Results(k,6),Draw_Results(k,7)];

   [t(:,k),oscillator(:,k*2-1:k*2)] = ode15s(@SMD_sys,time,y0(k,:),[],Draw_Results(k,:));
end
% plot the random draws 


subplot(5,8,35:37)
for j = 1:19
    plot(time,oscillator(:,j*2-1),'color',[.17 .17 .17],'LineWidth',2)
    hold on 
end
h2 = plot(time,oscillator(:,20*2-1),'color',[.17 .17 .17],'LineWidth',2);
hold on
h1 = plot(time,position,'g','LineWidth',1.5);
h3 = plot(time,position_noise(:,1),'r--','LineWidth',2);
hold on
for k = 2:4
     plot(time,position_noise(:,k),'r--','LineWidth',2);
end
%     hold on 
%     h2 = plot(time,position_noise,'r--','LineWidth',2);
lgd = legend([h1 h2 h3],'Ref. Position','Random Draws','Pos. with Noise','Orientation','vertical');
legend('boxoff')
lgd.FontSize= 8;
box off
set(gca,'fontsize',9)
text(-0.888,1,'E','fontsize',10,'fontweight','bold','units','normalized')
ylim([-0.2 0.2])
xlabel('time (s)')
ylabel('position (m)')


function y=SMD_fun(time,theta,y0)


    [t,y] = ode15s(@SMD_sys,time,y0,[],theta);

end

function ydot = SMD_sys(t,y,theta)
    % ode system function for MCMC mass spring damper example

%     DEFINE REAL VALUES IF NOT PART OF SEARCH
%     m    = 1;
%     c    = 0.25;
%     k1   = 3;
%     k2   = 10;
%     R    = 0.33;
    
%       DEFINE THETA VALUES THAT ARE PART OF SEARCH
%     m  = theta(1);
%     c  = theta(2);
%     R  = theta(3);
    
    m = theta(1);
    c = theta(2); 
    k1 = theta(3); % stiffness value for region 1
    k2 = theta(4); % stiffness value for region 2
    R  = theta(5);

    
    if (-R<y(1)) && (y(1)<R)
        A = [0 1; -k1/m -c/m];
%         count = 0;
    else 
        A = [0 1; -(((k1*R)/(abs(y(1)))-(k2*R)/(abs(y(1)))+k2))/m -c/m];
%         count = 1;
    end
    
    ydot = A*y ;

end



